<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:rabbit="http://www.springframework.org/schema/rabbit"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.3.xsd http://www.springframework.org/schema/rabbit http://www.springframework.org/schema/rabbit/spring-rabbit.xsd">

    <!-- 自动扫描Service类-->
    <context:component-scan base-package="com.willi">
        <!-- 扫描时跳过 @Controller 注解的JAVA类（控制器） -->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 扫描指定package下所有带有如@controller,@services,@resource,@ods并把所注释的注册为Spring Beans -->
    <context:component-scan base-package="com.willi.service.*"/>

    <!-- 激活annotation功能 -->
    <context:annotation-config/>


    <!-- *********************** AOP start ********************** -->

    <!--开启注解扫描-->
    <context:component-scan base-package="com.willi.service.aspect"></context:component-scan>
    <!--开启aop注解方式，默认为false-->
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>

    <!-- ************************ AOP end ******************************* -->


    <context:property-placeholder location="classpath:settings.properties"></context:property-placeholder>


    <!-- *********************** hibernate start ********************** -->

    <context:component-scan base-package="com.willi.entity"></context:component-scan>
    <!-- 数据源-->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${mysql.driver}"></property>
        <property name="url" value="${mysql.url}"></property>
        <property name="username" value="${mysql.user}"></property>
        <property name="password" value="${mysql.password}"></property>
    </bean>
    <!-- 可追加配置二级缓存 -->
    <bean id="sessionFactory" class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
        <property name="packagesToScan">
            <list>
                <value>com.willi.entity</value>
            </list>
        </property>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>
                <prop key="hibernate.hbm2ddl.auto">update</prop>
                <prop key="hibernate.show_sql">true</prop>
                <prop key="hibernate.format_sql">true</prop>
                <prop key="hibernate.connection.url">jdbc:mysql://localhost:3306/OPAS</prop>
                <prop key="hibernate.connection.driver_class">com.mysql.jdbc.Driver</prop>

            </props>
        </property>
    </bean>

    <!-- *************************** hibernate end ********************* -->


    <!-- **************************** Util start **********************-->

    <bean id="DateUtil" class="com.willi.util.impl.DateUtilImpl"/>
    <bean id="DECUtil" class="com.willi.util.impl.DECUitlImpl"/>
    <bean id="RedisUtil" class="com.willi.util.impl.RedisUtilImpl"/>

    <!-- **************************** Util end *************************-->

    <!-- **************************** Rabbitmq start **********************-->

    <bean id="connectionFactory" class="com.rabbitmq.client.ConnectionFactory"/>

    <!-- **************************** Rabbitmq end ***************************-->

    <!-- **************************** Redis start *****************************-->

    <bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}">
        </property>
        <property name="maxWaitMillis" value="${redis.maxWait}">
        </property>
        <property name="testOnBorrow" value="${redis.testOnBorrow}">
        </property>
    </bean>
    <bean id="jedisConnFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${redis.host}"
          p:port="${redis.port}"
          p:password="${redis.pass}"
          p:poolConfig-ref="poolConfig">
    </bean>
    <bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate"
          p:connectionFactory-ref="jedisConnFactory"/>
    <bean id="jedisPool" class="redis.clients.jedis.JedisPool"/>
    <bean id="jedis" class="redis.clients.jedis.Jedis"/>

    <!-- **************************** Redis end *******************************-->


</beans>